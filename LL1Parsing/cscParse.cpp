// :Scopy Grammar 2018
// 
// Parser Class Implementation File

// SHELL GENERATED BY PARSERGEN VERSION 5.0.4

#include <iostream>
#include <string>
using namespace std;

#include "cscParse.h"

Parser::Parser()
{
	tokenAvailable = false;
}

void Parser::SyntaxError(Token t, string msg)
{
	cout << "Syntax Error: " + msg << endl;
	exit(1); // abort on any syntax error
}

Token Parser::NextToken()
{
	if (!tokenAvailable)
	{
		savedToken = scan.GetNextToken();
		tokenAvailable = true;
	}
	return savedToken;
}

void Parser::Match(Token t)
{
	if (t != NextToken())
		SyntaxError(t, "");
	else
		tokenAvailable = false;
}


void Parser::ListType()
{
	switch (NextToken())
	{
	case FLOAT_LIT:
		FloatList();
		break;
	case INT_LIT:
		IntList();
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::InitValue()
{
	switch (NextToken())
	{
	case INT_LIT:
	case FLOAT_LIT:
	case SCRIBBLE_LIT:
		Literal();
		// code.ProcessLit();
		break;
	case LSTAPLE:
		Match(LSTAPLE);
		ListType();
		Match(RSTAPLE);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::VarDecTail()
{
	switch (NextToken())
	{
	case COMMA:
		Match(COMMA);
		Match(ID);
		// code.DefineVar();
		Init();
		// code.InitializeVar();
		VarDecTail();
		break;
	case SEMICOLON:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Init()
{
	switch (NextToken())
	{
	case ASSIGN_OP:
		Match(ASSIGN_OP);
		InitValue();
		break;
	case SEMICOLON:
	case COMMA:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::VarDecList()
{
	Match(ID);
	// code.DefineVar();
	Init();
	// code.InitializeVar();
	VarDecTail();
}

void Parser::DecTail()
{
	switch (NextToken())
	{
	case FLOAT_SYM:
	case FLOATARRAY_SYM:
	case INT_SYM:
	case INTARRAY_SYM:
	case SCRIBBLE_SYM:
		Declaration();
		DecTail();
		break;
	case BREAK_SYM:
	case DO_SYM:
	case FOR_SYM:
	case INPUT_SYM:
	case NEWLINE_SYM:
	case OUTPUT_SYM:
	case WHILE_SYM:
	case IF_SYM:
	case ID:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Declaration()
{
	Type();
	Match(COLON);
	VarDecList();
	Match(SEMICOLON);
}

void Parser::ScribbleType()
{
	Match(SCRIBBLE_SYM);
	SizeSpec();
}

void Parser::SizeSpec()
{
	switch (NextToken())
	{
	case LSTAPLE:
		Match(LSTAPLE);
		Match(INT_LIT);
		Match(RSTAPLE);
		break;
	case COLON:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Type()
{
	switch (NextToken())
	{
	case INT_SYM:
		Match(INT_SYM);
		break;
	case FLOAT_SYM:
		Match(FLOAT_SYM);
		break;
	case INTARRAY_SYM:
		Match(INTARRAY_SYM);
		SizeSpec();
		break;
	case FLOATARRAY_SYM:
		Match(FLOATARRAY_SYM);
		SizeSpec();
		break;
	case SCRIBBLE_SYM:
		ScribbleType();
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Literal()
{
	switch (NextToken())
	{
	case INT_LIT:
		Match(INT_LIT);
		break;
	case FLOAT_LIT:
		Match(FLOAT_LIT);
		break;
	case SCRIBBLE_LIT:
		Match(SCRIBBLE_LIT);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::MultOp()
{
	switch (NextToken())
	{
	case MULT_OP:
		Match(MULT_OP);
		break;
	case REALDIV_OP:
		Match(REALDIV_OP);
		break;
	case INTEGERDIV_OP:
		Match(INTEGERDIV_OP);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::FactorTail()
{
	switch (NextToken())
	{
	case MULT_OP:
	case REALDIV_OP:
	case INTEGERDIV_OP:
		MultOp();
		// code.ProcessOp();
		Primary();
		// code.GenInfix();
		FactorTail();
		break;
	case RSTAPLE:
	case RBANANA:
	case SEMICOLON:
	case COMMA:
	case PLUS_OP:
	case MINUS_OP:
	case LT_OP:
	case LE_OP:
	case GT_OP:
	case GE_OP:
	case EQ_OP:
	case NE_OP:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Primary()
{
	switch (NextToken())
	{
	case INT_LIT:
	case FLOAT_LIT:
	case SCRIBBLE_LIT:
		Literal();
		// code.ProcessLit();
		break;
	case ID:
		Variable();
		// code.ProcessVar();
		break;
	case LBANANA:
		Match(LBANANA);
		Expression();
		Match(RBANANA);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::AddOp()
{
	switch (NextToken())
	{
	case PLUS_OP:
		Match(PLUS_OP);
		break;
	case MINUS_OP:
		Match(MINUS_OP);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::ExprTail()
{
	switch (NextToken())
	{
	case PLUS_OP:
	case MINUS_OP:
		AddOp();
		// code.ProcessOp();
		Factor();
		// code.GenInfix();
		ExprTail();
		break;
	case RSTAPLE:
	case RBANANA:
	case SEMICOLON:
	case COMMA:
	case LT_OP:
	case LE_OP:
	case GT_OP:
	case GE_OP:
	case EQ_OP:
	case NE_OP:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Factor()
{
	Primary();
	FactorTail();
}

void Parser::RelOp()
{
	switch (NextToken())
	{
	case LT_OP:
		Match(LT_OP);
		break;
	case LE_OP:
		Match(LE_OP);
		break;
	case GT_OP:
		Match(GT_OP);
		break;
	case GE_OP:
		Match(GE_OP);
		break;
	case EQ_OP:
		Match(EQ_OP);
		break;
	case NE_OP:
		Match(NE_OP);
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::CondTail()
{
	switch (NextToken())
	{
	case LT_OP:
	case LE_OP:
	case GT_OP:
	case GE_OP:
	case EQ_OP:
	case NE_OP:
		RelOp();
		// code.ProcessOp();
		Expression();
		break;
	case RBANANA:
	case SEMICOLON:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::FloatListTail()
{
	switch (NextToken())
	{
	case COMMA:
		Match(COMMA);
		Match(FLOAT_LIT);
		// code.FloatAppend();
		FloatListTail();
		break;
	case RSTAPLE:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::FloatList()
{
	Match(FLOAT_LIT);
	// code.FloatAppend();
	FloatListTail();
}

void Parser::IntListTail()
{
	switch (NextToken())
	{
	case COMMA:
		Match(COMMA);
		Match(INT_LIT);
		// code.IntAppend();
		IntListTail();
		break;
	case RSTAPLE:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::IntList()
{
	Match(INT_LIT);
	// code.IntAppend();
	IntListTail();
}

void Parser::ForAssign()
{
	Variable();
	Match(ASSIGN_OP);
	Expression();
	// code.ForAssign();
}

void Parser::ElseClause()
{
	switch (NextToken())
	{
	case ELSE_SYM:
		Match(ELSE_SYM);
		// code.ProcessElse();
		StmtList();
		break;
	case ENDSTMT_SYM:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Condition()
{
	Expression();
	CondTail();
	// code.SetCondition();
}

void Parser::ForStmt()
{
	Match(FOR_SYM);
	Match(LBANANA);
	ForAssign();
	Match(SEMICOLON);
	Condition();
	Match(SEMICOLON);
	// code.ForUpdate();
	ForAssign();
	Match(RBANANA);
	StmtList();
	Match(ENDSTMT_SYM);
	// code.ForEnd();
}

void Parser::DoStmt()
{
	Match(DO_SYM);
	// code.DoLoopBegin();
	StmtList();
	Match(UNTIL_SYM);
	Match(LBANANA);
	Condition();
	Match(RBANANA);
	// code.DoLoopEnd();
	Match(SEMICOLON);
}

void Parser::WhileStmt()
{
	Match(WHILE_SYM);
	Match(LBANANA);
	Condition();
	Match(RBANANA);
	// code.WhileBegin();
	StmtList();
	Match(ENDSTMT_SYM);
	// code.WhileEnd();
}

void Parser::IfStmt()
{
	Match(IF_SYM);
	Match(LBANANA);
	Condition();
	Match(RBANANA);
	// code.ProcessIf();
	StmtList();
	ElseClause();
	Match(ENDSTMT_SYM);
	// code.IfEnd();
}

void Parser::ItemListTail()
{
	switch (NextToken())
	{
	case COMMA:
		Match(COMMA);
		Expression();
		// code.WriteExpr();
		ItemListTail();
		break;
	case SEMICOLON:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::ItemList()
{
	Expression();
	// code.WriteExpr();
	ItemListTail();
}

void Parser::VariableTail()
{
	switch (NextToken())
	{
	case LSTAPLE:
		Match(LSTAPLE);
		Expression();
		Match(RSTAPLE);
		break;
	case RSTAPLE:
	case RBANANA:
	case SEMICOLON:
	case COMMA:
	case ASSIGN_OP:
	case PLUS_OP:
	case MINUS_OP:
	case MULT_OP:
	case REALDIV_OP:
	case INTEGERDIV_OP:
	case LT_OP:
	case LE_OP:
	case GT_OP:
	case GE_OP:
	case EQ_OP:
	case NE_OP:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::VarListTail()
{
	switch (NextToken())
	{
	case COMMA:
		Match(COMMA);
		Variable();
		// code.InputVar();
		VarListTail();
		break;
	case SEMICOLON:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::VarList()
{
	Variable();
	// code.InputVar();
	VarListTail();
}

void Parser::Expression()
{
	Factor();
	ExprTail();
}

void Parser::Variable()
{
	Match(ID);
	VariableTail();
	// code.ProcessVar();
}

void Parser::BreakStmt()
{
	Match(BREAK_SYM);
	// code.Break();
	Match(SEMICOLON);
}

void Parser::NewlineStmt()
{
	Match(NEWLINE_SYM);
	// code.NewLine();
	Match(SEMICOLON);
}

void Parser::OutputStmt()
{
	Match(OUTPUT_SYM);
	ItemList();
	Match(SEMICOLON);
}

void Parser::InputStmt()
{
	Match(INPUT_SYM);
	VarList();
	Match(SEMICOLON);
}

void Parser::AssignStmt()
{
	Variable();
	Match(ASSIGN_OP);
	Expression();
	// code.Assign();
	Match(SEMICOLON);
}

void Parser::StructStmt()
{
	switch (NextToken())
	{
	case IF_SYM:
		IfStmt();
		break;
	case WHILE_SYM:
		WhileStmt();
		break;
	case DO_SYM:
		DoStmt();
		break;
	case FOR_SYM:
		ForStmt();
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::SimpleStmt()
{
	switch (NextToken())
	{
	case ID:
		AssignStmt();
		break;
	case INPUT_SYM:
		InputStmt();
		break;
	case OUTPUT_SYM:
		OutputStmt();
		break;
	case NEWLINE_SYM:
		NewlineStmt();
		break;
	case BREAK_SYM:
		BreakStmt();
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::StmtTail()
{
	switch (NextToken())
	{
	case BREAK_SYM:
	case DO_SYM:
	case FOR_SYM:
	case INPUT_SYM:
	case NEWLINE_SYM:
	case OUTPUT_SYM:
	case WHILE_SYM:
	case IF_SYM:
	case ID:
		Statement();
		StmtTail();
		break;
	case UNTIL_SYM:
	case END_SYM:
	case ELSE_SYM:
	case ENDSTMT_SYM:
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::Statement()
{
	switch (NextToken())
	{
	case BREAK_SYM:
	case INPUT_SYM:
	case NEWLINE_SYM:
	case OUTPUT_SYM:
	case ID:
		SimpleStmt();
		break;
	case DO_SYM:
	case FOR_SYM:
	case WHILE_SYM:
	case IF_SYM:
		StructStmt();
		break;
	default:
		SyntaxError(NextToken(), "");
	}
}

void Parser::StmtList()
{
	Statement();
	StmtTail();
}

void Parser::DecList()
{
	Declaration();
	DecTail();
}

void Parser::Program()
{
	// code.Start();
	Match(BEGIN_SYM);
	DecList();
	StmtList();
	Match(END_SYM);
	// code.End();
}

void Parser::SystemGoal()
{
	Program();
	Match(EOF_SYM);
}
